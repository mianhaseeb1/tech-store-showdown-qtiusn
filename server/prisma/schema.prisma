// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String      @id @default(uuid())
  name        String
  price       Float
  quantity    Int         @default(0)
  description String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  owner       User        @relation(fields: [ownerId], references: [id])
  ownerId     String
  OrderItems  OrderItem[]
  CartItems   CartItem[]
}

model Order {
  id         String      @id @default(uuid())
  totalPrice Float
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  address    Address     @relation(fields: [addressId], references: [id])
  addressId  String
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  orderItems OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  quantity  Int
  unitPrice Float
  product   Product @relation(fields: [productId], references: [id])
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
}

model Address {
  id           String   @id @default(uuid())
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  type         String
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  orders       Order[]
}

model User {
  id           String     @id @default(uuid())
  name         String
  email        String     @unique
  passwordHash String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  orders       Order[]
  products     Product[]  // Changed from Products to products to avoid ambiguity
  cartItems    CartItem[] // Changed from CartItems to cartItems to avoid ambiguity
  cart         Cart[]     // Changed from Cart to carts to avoid ambiguity
  addresses    Address[]
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cartItems CartItem[]
}

model CartItem {
  id        String  @id @default(uuid())
  quantity  Int
  product   Product @relation(fields: [productId], references: [id])
  productId String
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String
  user      User?   @relation(fields: [userId], references: [id])
  userId    String?
}
